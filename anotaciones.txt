import React, { useState, useEffect, useCallback } from "react";
import { View, Text, StyleSheet, TextInput, Alert, FlatList, TouchableOpacity, ActivityIndicator, Image } from "react-native";
import { Swipeable, GestureHandlerRootView } from 'react-native-gesture-handler';
import { addDeudaToFirestore, getDeudasFromFirestore, deleteDeudaFromFirestore, updateDeudaInFirestore } from "../../credenciales";

// Constantes para opciones
const ATRASADO_OPCIONES = { NO: "No", SI: "SÃ­" };

// Mapa de entidades a imÃ¡genes
const entidadImagenes = {
  "Bancolombia": require('../assets/Bancolombia-.png'),
  "Agaval": require('../assets/Agaval.webp'),
  "Banco de Bogota": require('../assets/Banco De Bogota.png'),
};

const entidadesFinancieras = ["Bancolombia", "Agaval", "Banco de Bogota", "Davivienda", "Banco de Occidente", "Banco Popular", "Banco Agrario de Colombia", "BBVA Colombia", "Banco AV Villas", "Banco Caja Social", "Banco GNB Sudameris", "Scotiabank Colpatria", "Banco Pichincha", "Bancoomeva", "Banco W", "Banco Finandina", "Banco Falabella", "BancamÃ­a", "Banco Credifinanciera", "Banco Coopcentral"];

export default function DeudasScreen() {
  const [showForm, setShowForm] = useState(false);
  const [entidad, set
  ] = useState("");
  const [deudaTotal, setDeudaTotal] = useState("");
  const [valorCuota, setValorCuota] = useState(""); // Nuevo estado para el valor de la cuota
  const [pagosRealizados, setPagosRealizados] = useState(0);
  const [atrasado, setAtrasado] = useState(ATRASADO_OPCIONES.NO);
  const [cuotas, setCuotas] = useState(1);
  const [fechaInicio, setFechaInicio] = useState("");
  const [deudas, setDeudas] = useState([]);
  const [loading, setLoading] = useState(false);
  const [imagenEntidad, setImagenEntidad] = useState(null);
  const [editingDeudaId, setEditingDeudaId] = useState(null);
  const [sugerencias, setSugerencias] = useState([]);

  useEffect(() => {
    fetchDeudas();
  }, []);

  const fetchDeudas = async () => {
    setLoading(true);
    try {
      const data = await getDeudasFromFirestore();
      setDeudas(data);
    } catch (error) {
      Alert.alert("Error", "No se pudieron cargar las deudas. IntÃ©ntelo de nuevo mÃ¡s tarde.");
    } finally {
      setLoading(false);
    }
  };

  const calcularDeudaPendiente = (deudaTotal, pagosRealizados) => {
    const deudaPendiente = deudaTotal - pagosRealizados;
    return deudaPendiente > 0 ? deudaPendiente.toFixed(2) : 0;
  };

  const handleSubmit = async () => {
    if (!entidad.trim() || !deudaTotal.trim() || !valorCuota.trim() || !fechaInicio.trim()) {
      Alert.alert("Error", "Todos los campos son obligatorios.");
      return;
    }

    const deudaTotalNum = Number(deudaTotal.replace(/,/g, '.'));
    const valorCuotaNum = Number(valorCuota.replace(/,/g, '.'));

    if (isNaN(deudaTotalNum) || deudaTotalNum <= 0) {
      Alert.alert("Error", "La deuda total debe ser un nÃºmero vÃ¡lido.");
      return;
    }

    if (isNaN(valorCuotaNum) || valorCuotaNum <= 0) {
      Alert.alert("Error", "El valor de la cuota debe ser un nÃºmero vÃ¡lido.");
      return;
    }

    const nuevaDeuda = {
      entidad,
      deudaTotal: deudaTotalNum.toFixed(2),
      valorCuota: valorCuotaNum.toFixed(2), // Guardar el valor de la cuota
      pagosRealizados: 0,
      cuotasPagadas: 0,
      atrasado,
      cuotas,
      fechaInicio,
      imagen: entidadImagenes[entidad] || null,
    };

    try {
      if (editingDeudaId) {
        await updateDeudaInFirestore(editingDeudaId, nuevaDeuda);
        Alert.alert("Ã‰xito", "La deuda se ha actualizado correctamente.");
      } else {
        await addDeudaToFirestore(nuevaDeuda);
        Alert.alert("Ã‰xito", "La deuda se ha guardado correctamente.");
      }
      fetchDeudas();
      handleCloseForm();
    } catch (error) {
      Alert.alert("Error", "No se pudo guardar la deuda. IntÃ©ntelo de nuevo.");
    }
  };

  const handleDeleteDeuda = async (id) => {
    try {
      await deleteDeudaFromFirestore(id);
      fetchDeudas();
      Alert.alert("Ã‰xito", "La deuda se ha eliminado correctamente.");
    } catch (error) {
      Alert.alert("Error", "No se pudo eliminar la deuda.");
    }
  };

  const handleEditDeuda = (deuda) => {
    setEditingDeudaId(deuda.id);
    setEntidad(deuda.entidad);
    setDeudaTotal(deuda.deudaTotal);
    setValorCuota(deuda.valorCuota); // Establecer el valor de la cuota
    setPagosRealizados(deuda.pagosRealizados);
    setAtrasado(deuda.atrasado);
    setCuotas(deuda.cuotas);
    setFechaInicio(deuda.fechaInicio);
    setImagenEntidad(deuda.imagen || null);
    setShowForm(true);
  };

  const handleCloseForm = () => {
    setShowForm(false);
    setEntidad("");
    setDeudaTotal("");
    setValorCuota(""); // Limpiar el valor de la cuota
    setPagosRealizados(0);
    setAtrasado(ATRASADO_OPCIONES.NO);
    setCuotas(1);
    setFechaInicio("");
    setImagenEntidad(null);
    setEditingDeudaId(null);
  };

  const handleEntidadChange = (texto) => {
    setEntidad(texto);
    if (texto.length > 0) {
      const sugerenciasFiltradas = entidadesFinancieras.filter((entidad) =>
        entidad.toLowerCase().includes(texto.toLowerCase())
      );
      setSugerencias(sugerenciasFiltradas);
    } else {
      setSugerencias([]);
    }
  };

  const handleRegistrarPago = async (id, montoPago) => {
    try {
      const deuda = deudas.find((deuda) => deuda.id === id);
      const montoPagoNum = parseFloat(montoPago);
      
      if (isNaN(montoPagoNum) || montoPagoNum <= 0) {
        Alert.alert("Error", "Ingrese un monto de pago vÃ¡lido.");
        return;
      }
  
      let nuevosPagosRealizados = parseFloat(deuda.pagosRealizados) + montoPagoNum;
      let nuevaDeudaPendiente = parseFloat(deuda.deudaTotal) - nuevosPagosRealizados;
      let nuevasCuotasPagadas = deuda.cuotasPagadas;
  
      // Si el pago es mayor o igual al valor de la cuota, aumenta la cuota pagada
      while (montoPagoNum >= parseFloat(deuda.valorCuota) && nuevasCuotasPagadas < deuda.cuotas) {
        nuevasCuotasPagadas += 1;
        montoPagoNum -= parseFloat(deuda.valorCuota);
      }
  
      // Si la deuda estÃ¡ completamente pagada, eliminarla
      if (nuevaDeudaPendiente <= 0) {
        await deleteDeudaFromFirestore(id);
        Alert.alert("Ã‰xito", "La deuda ha sido completamente pagada y eliminada.");
      } else {
        // Actualizar la deuda en Firestore
        await updateDeudaInFirestore(id, {
          pagosRealizados: nuevosPagosRealizados,
          cuotasPagadas: nuevasCuotasPagadas,
          deudaTotal: nuevaDeudaPendiente.toFixed(2),
        });
        Alert.alert("Ã‰xito", "El pago se ha registrado correctamente.");
      }
  
      fetchDeudas();
    } catch (error) {
      Alert.alert("Error", "No se pudo registrar el pago.");
    }
  };
  

  const mostrarDetallesDeuda = (deuda) => {
    const deudaPendiente = calcularDeudaPendiente(deuda.deudaTotal, deuda.pagosRealizados);
    const cuotasPendientes = deuda.cuotas - deuda.cuotasPagadas;

    Alert.alert(
      "Detalles de la Deuda",
      `ðŸ“Œ ${deuda.entidad}\n\nðŸ’° **Deuda Total:** $${deuda.deudaTotal}\nðŸ“† **Fecha Inicio:** ${deuda.fechaInicio}\nðŸ’³ **Cuotas Pendientes:** ${cuotasPendientes}\nðŸ’² **Valor Cuota:** $${deuda.valorCuota}\nðŸ”¹ **Deuda Pendiente:** $${deudaPendiente}`,
      [{ text: "Cerrar", style: "cancel" }]
    );
  };

  const renderItem = useCallback(({ item }) => {
    const deudaPendiente = calcularDeudaPendiente(item.deudaTotal, item.pagosRealizados);
    const cuotasPendientes = item.cuotas - item.cuotasPagadas;

    const renderRightActions = () => (
      <View style={styles.rightActions}>
        <TouchableOpacity
          style={styles.deleteButton}
          onPress={() => handleDeleteDeuda(item.id)}
        >
          <Text style={styles.deleteButtonText}>Eliminar</Text>
        </TouchableOpacity>
      </View>
    );

    const renderLeftActions = () => (
      <View style={styles.leftActions}>
        <TouchableOpacity
          style={styles.editButton}
          onPress={() => handleEditDeuda(item)}
        >
          <Text style={styles.editButtonText}>Editar</Text>
        </TouchableOpacity>
      </View>
    );

    return (
      <Swipeable
        renderRightActions={renderRightActions}
        renderLeftActions={renderLeftActions}
      >
        <TouchableOpacity onPress={() => mostrarDetallesDeuda(item)}>
          <View style={styles.itemContainer}>
            <Text style={styles.itemText2}> {item.fechaInicio}</Text>
            <View style={[styles.item, { borderLeftColor: item.atrasado === ATRASADO_OPCIONES.SI ? "#E74C3C" : "#3498DB" }]}>
              {item.imagen && (
                <Image
                  source={item.imagen}
                  style={styles.entityImage}
                  resizeMode="contain"
                />
              )}
              <View style={styles.itemContent}>
                <Text style={styles.itemText}>
                  <Text style={styles.itemTextLabel}>Valor Cuota: </Text>
                  <Text style={styles.itemTextValue}>${parseFloat(item.valorCuota).toLocaleString("es-ES", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</Text>
                </Text>
                <Text style={styles.itemText}>
                  <Text style={styles.itemTextLabel}>Cuota: </Text>
                  <Text style={styles.itemTextValue}>{item.cuotasPagadas + 1} de {item.cuotas}</Text>
                </Text>
                <TouchableOpacity
                  style={styles.pagoButton}
                  onPress={() => {
                    Alert.prompt(
                      "Registrar Pago",
                      "Ingrese el monto del pago:",
                      [
                        {
                          text: "Cancelar",
                          style: "cancel",
                        },
                        {
                          text: "Registrar",
                          onPress: (montoPago) => handleRegistrarPago(item.id, montoPago),
                        },
                      ],
                      "plain-text",
                      "",
                      "numeric"
                    );
                  }}
                >
                  <Text style={styles.pagoButtonText}>Registrar Pago</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </TouchableOpacity>
      </Swipeable>
    );
  }, []);

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <View style={styles.container}>
        {showForm ? (
          <View style={styles.formContainer}>
            <Text style={styles.label}>Entidad Financiera</Text>
            <TextInput
              style={styles.input}
              value={entidad}
              onChangeText={handleEntidadChange}
              placeholder="Ej: Banco XYZ"
              placeholderTextColor="#888"
            />
            {sugerencias.length > 0 && (
              <FlatList
                data={sugerencias}
                keyExtractor={(item, index) => index.toString()}
                renderItem={({ item }) => (
                  <TouchableOpacity onPress={() => {
                    setEntidad(item);
                    setSugerencias([]);
                  }}>
                    <Text style={styles.sugerenciaItem}>{item}</Text>
                  </TouchableOpacity>
                )}
                style={styles.sugerenciasContainer}
              />
            )}

            {imagenEntidad && (
              <Image
                source={imagenEntidad}
                style={{ width: 100, height: 100, alignSelf: 'center', marginBottom: 20 }}
                resizeMode="contain"
              />
            )}

            <Text style={styles.label}>Deuda Total</Text>
            <TextInput
              style={styles.input}
              value={deudaTotal}
              onChangeText={setDeudaTotal}
              keyboardType="numeric"
              placeholder="Ej: 10000.00"
              placeholderTextColor="#888"
            />

            <Text style={styles.label}>Valor de la Cuota</Text>
            <TextInput
              style={styles.input}
              value={valorCuota}
              onChangeText={setValorCuota}
              keyboardType="numeric"
              placeholder="Ej: 500.00"
              placeholderTextColor="#888"
            />

            <Text style={styles.label}>Fecha Deuda</Text>
            <TextInput
              style={styles.input}
              value={fechaInicio}
              onChangeText={setFechaInicio}
              keyboardType="numeric"
              placeholder="DD-MM-AAAA"
              placeholderTextColor="#888"
            />

            <Text style={styles.label}>Â¿EstÃ¡s atrasado en los pagos?</Text>
            <View style={styles.toggleContainer}>
              <TouchableOpacity
                onPress={() => setAtrasado(ATRASADO_OPCIONES.NO)}
                style={[
                  styles.toggleButton,
                  atrasado === ATRASADO_OPCIONES.NO ? styles.selectedYes : styles.unselected,
                ]}
              >
                <Text style={styles.toggleText}>No</Text>
              </TouchableOpacity>
              <TouchableOpacity
                onPress={() => setAtrasado(ATRASADO_OPCIONES.SI)}
                style={[
                  styles.toggleButton,
                  atrasado === ATRASADO_OPCIONES.SI ? styles.selectedNo : styles.unselected,
                ]}
              >
                <Text style={styles.toggleText}>SÃ­</Text>
              </TouchableOpacity>
            </View>

            <Text style={styles.label}>NÃºmero de cuotas pendientes</Text>
            <View style={styles.counterContainer}>
              <TouchableOpacity
                onPress={() => setCuotas(Math.max(1, cuotas - 1))}
                style={styles.counterButton}
              >
                <Text style={styles.counterText}>-</Text>
              </TouchableOpacity>
              <Text style={styles.counterValue}>{cuotas}</Text>
              <TouchableOpacity
                onPress={() => setCuotas(cuotas + 1)}
                style={styles.counterButton}
              >
                <Text style={styles.counterText}>+</Text>
              </TouchableOpacity>
            </View>

            <View style={styles.buttonContainer}>
              <TouchableOpacity style={styles.cancelButton} onPress={handleCloseForm}>
                <Text style={styles.buttonText}>Cancelar</Text>
              </TouchableOpacity>
              <TouchableOpacity style={styles.saveButton} onPress={handleSubmit}>
                <Text style={styles.buttonText}>{editingDeudaId ? "Actualizar" : "Guardar"}</Text>
              </TouchableOpacity>
            </View>
          </View>
        ) : (
          <View style={styles.listContainer}>
            <Text style={styles.title}>Deudas Registradas</Text>
            {loading ? (
              <ActivityIndicator size="large" color="#4CAF50" />
            ) : (
              <FlatList
                data={deudas}
                keyExtractor={(item) => item.id}
                renderItem={renderItem}
              />
            )}
          </View>
        )}

        {!showForm && (
          <TouchableOpacity
            style={styles.floatingButton}
            onPress={() => setShowForm(true)}
          >
            <Text style={styles.floatingButtonText}>Agregar Deuda</Text>
          </TouchableOpacity>
        )}
      </View>
    </GestureHandlerRootView>
  );
}

const styles = StyleSheet.create({

  modalContainer: { flex: 1, backgroundColor: "rgba(0,0,0,0.5)", justifyContent: "center", alignItems: "center" },
  modalContent: { width: "85%", backgroundColor: "white", padding: 20, borderRadius: 10, alignItems: "center" },
  modalTitle: { fontSize: 20, fontWeight: "bold", marginBottom: 15, color: "#2C3E50" },
  detailText: { fontSize: 16, marginVertical: 5, color: "#34495E" },
  label: { fontWeight: "bold", color: "#2C3E50" },
  closeButton: { marginTop: 20, backgroundColor: "#3498DB", paddingVertical: 10, paddingHorizontal: 20, borderRadius: 5 },
  closeButtonText: { color: "white", fontSize: 16, fontWeight: "bold" },
  container: { flex: 1, padding: 15, backgroundColor: "#F5F5F5" },
  title: { fontSize: 22, fontWeight: "bold", marginBottom: 10, textAlign: "center", color: "#2C3E50" },
  formContainer: { backgroundColor: "#FFFFFF", padding: 20, borderRadius: 15, shadowColor: "#000", shadowOffset: { width: 0, height: 4 }, shadowOpacity: 0.2, shadowRadius: 10, elevation: 5, marginBottom: 10, marginTop: 10 },
  listContainer: { flex: 1, marginTop: -7 },
  label: { color: "#34495E", marginBottom: 5, fontSize: 16, fontWeight: "500" },
  input: { backgroundColor: "#ECF0F1", color: "#2C3E50", padding: 15, borderRadius: 10, marginBottom: 15, fontSize: 16, borderWidth: 1, borderColor: "#BDC3C7" },
  toggleContainer: { flexDirection: "row", justifyContent: "space-between", marginBottom: 15 },
  toggleButton: { flex: 1, padding: 12, alignItems: "center", marginHorizontal: 5, borderRadius: 8, borderWidth: 1, borderColor: "#BDC3C7", backgroundColor: "#FFFFFF" },
  toggleText: { color: "#2C3E50", fontSize: 16, fontWeight: "600" },
  selectedYes: { backgroundColor: "#2ECC71", borderColor: "#27AE60" },
  selectedNo: { backgroundColor: "#E74C3C", borderColor: "#C0392B" },
  unselected: { backgroundColor: "#FFFFFF" },
  counterContainer: { flexDirection: "row", alignItems: "center", justifyContent: "center", marginBottom: 10 },
  counterButton: { backgroundColor: "#3498DB", padding: 12, borderRadius: 8, marginHorizontal: 10, shadowColor: "#000", shadowOffset: { width: 0, height: 2 }, shadowOpacity: 0.3, shadowRadius: 3, elevation: 3 },
  counterText: { fontSize: 20, color: "#FFFFFF", fontWeight: "600" },
  counterValue: { fontSize: 18, color: "#2C3E50", marginHorizontal: 10 },
  itemContainer: { marginBottom: 10 },
  item: { backgroundColor: "#FFFFFF", padding: 15, borderRadius: 10, flexDirection: "row", alignItems: "center", borderLeftWidth: 15, borderLeftColor: "#3498DB", shadowColor: "#000", shadowOpacity: 0.1, shadowRadius: 5, elevation: 3 },
  entityImage: { width: 50, height: 50, marginRight: 15, borderRadius: 5 },
  itemContent: { flex: 1 },
  itemText: { fontSize: 14, color: "#2C3E50", marginBottom: 5 },
  itemTextLabel: { fontSize: 14, color: "#34495E" },
  itemTextValue: { fontSize: 14, color: "#2C3E50", fontWeight: "bold" },
  itemText2: { position: "relative", marginLeft: "33%", fontSize: 16, color: "#2C3E50", flex: 1, left: 16, top: 10, transform: [{ translateY: -5 }], zIndex: 1, width: 90, borderWidth: 1, borderColor: "#ffff", borderRadius: 5, backgroundColor: "#ffff", shadowColor: "#000", shadowOffset: { width: 2, height: 2 }, shadowOpacity: 0.2, shadowRadius: 4, elevation: 3 },
  sugerenciasContainer: { backgroundColor: "#fff", borderRadius: 5, elevation: 3, marginTop: 5, maxHeight: 150, borderColor: "#ddd", borderWidth: 1 },
  sugerenciaItem: { padding: 10, borderBottomWidth: 1, borderBottomColor: "#ddd", color: "#333" },
  rightActions: { justifyContent: "center", alignItems: "flex-end", marginRight: 15 },
  leftActions: { justifyContent: "center", alignItems: "flex-start", marginLeft: 15 },
  deleteButton: { backgroundColor: "#E74C3C", borderRadius: 5, width: 82, height: 82, top: 8, justifyContent: "center", alignItems: "center" },
  deleteButtonText: { color: "#FFFFFF", fontSize: 14, fontWeight: "bold" },
  editButton: { backgroundColor: "#3498DB", borderRadius: 5, width: 82, height: 82, top: 8, justifyContent: "center", alignItems: "center" },
  editButtonText: { color: "#FFFFFF", fontSize: 14, fontWeight: "bold" },
  floatingButton: { position: "absolute", bottom: 20, right: 20, backgroundColor: "#3498DB", padding: 15, borderRadius: 30, elevation: 5 },
  floatingButtonText: { color: "#FFFFFF", fontSize: 20, fontWeight: "bold" },
  buttonContainer: { flexDirection: "row", justifyContent: "space-between", marginTop: 20 },
  cancelButton: { backgroundColor: "#E74C3C", padding: 15, borderRadius: 10, flex: 1, marginRight: 10, alignItems: "center", shadowColor: "#000", shadowOffset: { width: 0, height: 4 }, shadowOpacity: 0.5, shadowRadius: 10, elevation: 5 },
  saveButton: { backgroundColor: "#2ECC71", padding: 15, borderRadius: 10, flex: 1, marginLeft: 10, alignItems: "center", shadowColor: "#000", shadowOffset: { width: 0, height: 4 }, shadowOpacity: 0.5, shadowRadius: 10, elevation: 5 },
  buttonText: { color: "#FFFFFF", fontSize: 16, fontWeight: "bold" },
  pagoButton: { backgroundColor: "#2ECC71", padding: 10, borderRadius: 5, alignItems: "center", marginTop: 10 },
  pagoButtonText: { color: "#FFFFFF", fontSize: 14, fontWeight: "bold" },
});