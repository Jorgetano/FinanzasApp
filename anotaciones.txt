Deuda list


import React, { useState, useCallback } from "react";
import { View, Text, StyleSheet, TouchableOpacity, FlatList, Image, Alert, ActivityIndicator, Modal, TextInput, Button } from "react-native";
import { Swipeable } from 'react-native-gesture-handler';

const DeudaList = ({
  deudas,
  loading,
  handleDeleteDeuda,
  handleEditDeuda,
  handleRegistrarPago,
  mostrarDetallesDeuda,
}) => {
  const [modalVisible, setModalVisible] = useState(false);
  const [montoPago, setMontoPago] = useState("");
  const [selectedDeudaId, setSelectedDeudaId] = useState(null);

  const handleOpenModal = (id) => {
    setSelectedDeudaId(id);
    setModalVisible(true);
  };

  const handleConfirmPago = () => {
    if (!montoPago.trim()) {
      Alert.alert("Error", "Debe ingresar un monto válido.");
      return;
    }
    handleRegistrarPago(selectedDeudaId, montoPago);
    setMontoPago("");
    setModalVisible(false);
  };
  const renderItem = useCallback(({ item }) => {
    return (
      <Swipeable
        renderRightActions={() => (
          <View style={styles.rightActions}>
            <TouchableOpacity style={styles.deleteButton} onPress={() => handleDeleteDeuda(item.id)}>
              <Text style={styles.deleteButtonText}>Eliminar</Text>
            </TouchableOpacity>
          </View>
        )}
        renderLeftActions={() => (
          <View style={styles.leftActions}>
            <TouchableOpacity style={styles.editButton} onPress={() => handleEditDeuda(item)}>
              <Text style={styles.editButtonText}>Editar</Text>
            </TouchableOpacity>
          </View>
        )}
      >
        <TouchableOpacity
          style={{ flex: 1, padding: 10 }} // Asegúrate de que ocupe todo el espacio y tenga un área táctil
          onPress={() => {
            console.log("Deuda seleccionada:", item); // Verifica si se ejecuta
            mostrarDetallesDeuda(item);
          }}
        >
          <View style={styles.itemContainer}>
            <Text style={styles.itemText2}> {item.fechaInicio}</Text>
            <View style={[styles.item, { borderLeftColor: item.atrasado === "Sí" ? "#E74C3C" : "#3498DB" }]}>
              {item.imagen && <Image source={item.imagen} style={styles.entityImage} resizeMode="contain" />}
              <View style={styles.itemContent}>
                <Text style={styles.itemText}>
                  <Text style={styles.itemTextLabel}>Valor Cuota: </Text>
                  <Text style={styles.itemTextValue}>${parseFloat(item.valorCuota).toLocaleString("es-ES", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</Text>
                </Text>
                <Text style={styles.itemText}>
                  <Text style={styles.itemTextLabel}>Cuota: </Text>
                  <Text style={styles.itemTextValue}>{item.cuotasPagadas + 1} de {item.cuotas}</Text>
                </Text>
                <TouchableOpacity style={styles.pagoButton} onPress={() => handleOpenModal(item.id)}>
                  <Text style={styles.pagoButtonText}>Registrar Pago</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </TouchableOpacity>
      </Swipeable>
    );
  }, []);

  return (
    <View style={styles.listContainer}>
      <Text style={styles.title}>Deudas Registradas</Text>
      {loading ? (
        <ActivityIndicator size="large" color="#4CAF50" />
      ) : (
        <FlatList data={deudas} keyExtractor={(item) => item.id} renderItem={renderItem} />
      )}

      {/* Modal para registrar pago */}
      <Modal animationType="slide" transparent={true} visible={modalVisible} onRequestClose={() => setModalVisible(false)}>
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Registrar Pago</Text>
            <TextInput
              style={styles.input}
              placeholder="Ingrese el monto"
              keyboardType="numeric"
              value={montoPago}
              onChangeText={setMontoPago}
            />
            <View style={styles.modalButtons}>
              <Button title="Cancelar" color="#E74C3C" onPress={() => setModalVisible(false)} />
              <Button title="Registrar" color="#2ECC71" onPress={handleConfirmPago} />
            </View>
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  listContainer: { flex: 1, marginTop: -7 },
  itemContainer: { marginBottom: 10 },
  item: { backgroundColor: "#FFFFFF", padding: 15, borderRadius: 10, flexDirection: "row", alignItems: "center", borderLeftWidth: 15, borderLeftColor: "#3498DB", shadowColor: "#000", shadowOpacity: 0.1, shadowRadius: 5, elevation: 3 },
  entityImage: { width: 50, height: 50, marginRight: 15, borderRadius: 5 },
  itemContent: { flex: 1 },
  itemText: { fontSize: 14, color: "#2C3E50", marginBottom: 5 },
  itemTextLabel: { fontSize: 14, color: "#34495E" },
  itemTextValue: { fontSize: 14, color: "#2C3E50", fontWeight: "bold" },
  itemText2: { position: "relative", marginLeft: "33%", fontSize: 16, color: "#2C3E50", flex: 1, left: 16, top: 10, transform: [{ translateY: -5 }], zIndex: 1, width: 90, borderWidth: 1, borderColor: "#ffff", borderRadius: 5, backgroundColor: "#ffff", shadowColor: "#000", shadowOffset: { width: 2, height: 2 }, shadowOpacity: 0.2, shadowRadius: 4, elevation: 3 },
  rightActions: { justifyContent: "center", alignItems: "flex-end", marginRight: 15 },
  leftActions: { justifyContent: "center", alignItems: "flex-start", marginLeft: 15 },
  deleteButton: { backgroundColor: "#E74C3C", borderRadius: 5, width: 82, height: 82, top: 8, justifyContent: "center", alignItems: "center" },
  deleteButtonText: { color: "#FFFFFF", fontSize: 14, fontWeight: "bold" },
  editButton: { backgroundColor: "#3498DB", borderRadius: 5, width: 82, height: 82, top: 8, justifyContent: "center", alignItems: "center" },
  editButtonText: { color: "#FFFFFF", fontSize: 14, fontWeight: "bold" },
  pagoButton: { backgroundColor: "#2ECC71", padding: 10, borderRadius: 5, alignItems: "center", marginTop: 10 },
  pagoButtonText: { color: "#FFFFFF", fontSize: 14, fontWeight: "bold" },
  title: { fontSize: 22, fontWeight: "bold", marginBottom: 10, textAlign: "center", color: "#2C3E50" },
  modalContainer: { flex: 1, justifyContent: "center", alignItems: "center", backgroundColor: "rgba(0,0,0,0.5)" },
  modalContent: { backgroundColor: "white", padding: 20, borderRadius: 10, width: "80%", alignItems: "center" },
  modalTitle: { fontSize: 18, fontWeight: "bold", marginBottom: 10 },
  input: { width: "100%", borderWidth: 1, padding: 10, borderRadius: 5, marginBottom: 10 },
  modalButtons: { flexDirection: "row", justifyContent: "space-between", width: "100%" },
});

export default DeudaList;


----------------------------------------------------------------------------------------------------------------
import React, { useState, useEffect } from "react";
import { View, StyleSheet, TouchableOpacity, Text, Alert } from "react-native";
import { GestureHandlerRootView } from 'react-native-gesture-handler';
import { addDeudaToFirestore, getDeudasFromFirestore, deleteDeudaFromFirestore, updateDeudaInFirestore } from "../../credenciales";
import DeudaForm from "./DeudaForm";
import DeudaList from "./DeudaList";

// Constantes
const ATRASADO_OPCIONES = { NO: "No", SI: "Sí" };

const entidadImagenes = {
  "Bancolombia": require('../../assets/Bancolombia-.png'),
  "Agaval": require('../../assets/Agaval.webp'),
  "Banco de Bogota": require('../../assets/Banco De Bogota.png'),
};

const entidadesFinancieras = [
  "Bancolombia", "Agaval", "Banco de Bogota", "Davivienda", "Banco de Occidente", 
  "Banco Popular", "Banco Agrario de Colombia", "BBVA Colombia", "Banco AV Villas", 
  "Banco Caja Social", "Banco GNB Sudameris", "Scotiabank Colpatria", "Banco Pichincha", 
  "Bancoomeva", "Banco W", "Banco Finandina", "Banco Falabella", "Bancamía", 
  "Banco Credifinanciera", "Banco Coopcentral"
];

export default function DeudasScreen() {
  const [showForm, setShowForm] = useState(false);
  const [entidad, setEntidad] = useState("");
  const [deudaTotal, setDeudaTotal] = useState("");
  const [valorCuota, setValorCuota] = useState("");
  const [pagosRealizados, setPagosRealizados] = useState(0);
  const [atrasado, setAtrasado] = useState(ATRASADO_OPCIONES.NO);
  const [cuotas, setCuotas] = useState(1);
  const [fechaInicio, setFechaInicio] = useState("");
  const [deudas, setDeudas] = useState([]);
  const [loading, setLoading] = useState(false);
  const [imagenEntidad, setImagenEntidad] = useState(null);
  const [editingDeudaId, setEditingDeudaId] = useState(null);
  const [sugerencias, setSugerencias] = useState([]);

  // Cargar deudas al iniciar
  useEffect(() => {
    fetchDeudas();
  }, []);

  // Obtener deudas desde Firestore
  const fetchDeudas = async () => {
    setLoading(true);
    try {
      const data = await getDeudasFromFirestore();
      const deudasActualizadas = data.map((deuda) => ({
        ...deuda,
        cuotasPagadas: Math.min(calcularDiferenciaEnMeses(deuda.fechaInicio), deuda.cuotas),
      }));
      setDeudas(deudasActualizadas);
    } catch (error) {
      Alert.alert("Error", "No se pudieron cargar las deudas. Inténtelo de nuevo más tarde.");
    } finally {
      setLoading(false);
    }
  };

  // Calcular diferencia en meses entre dos fechas
  const calcularDiferenciaEnMeses = (fechaInicio) => {
    const fechaActual = new Date();
    const fechaInicioDate = new Date(fechaInicio);
    if (fechaInicioDate > fechaActual) return 0;
    let meses = (fechaActual.getFullYear() - fechaInicioDate.getFullYear()) * 12;
    meses -= fechaInicioDate.getMonth();
    meses += fechaActual.getMonth();
    return meses <= 0 ? 0 : meses;
  };

  // Manejar envío del formulario
  const handleSubmit = async () => {
    if (!entidad.trim() || !deudaTotal.trim() || !valorCuota.trim() || !fechaInicio.trim()) {
      Alert.alert("Error", "Todos los campos son obligatorios.");
      return;
    }

    const deudaTotalNum = Number(deudaTotal.replace(/,/g, '.'));
    const valorCuotaNum = Number(valorCuota.replace(/,/g, '.'));

    if (isNaN(deudaTotalNum) || deudaTotalNum <= 0) {
      Alert.alert("Error", "La deuda total debe ser un número válido.");
      return;
    }

    if (isNaN(valorCuotaNum) || valorCuotaNum <= 0) {
      Alert.alert("Error", "El valor de la cuota debe ser un número válido.");
      return;
    }

    const nuevaDeuda = {
      entidad,
      deudaTotal: deudaTotalNum.toFixed(2),
      valorCuota: valorCuotaNum.toFixed(2),
      pagosRealizados: 0,
      cuotasPagadas: 0,
      atrasado,
      cuotas,
      fechaInicio,
      imagen: entidadImagenes[entidad] || null,
    };

    try {
      if (editingDeudaId) {
        await updateDeudaInFirestore(editingDeudaId, nuevaDeuda);
        Alert.alert("Éxito", "La deuda se ha actualizado correctamente.");
      } else {
        await addDeudaToFirestore(nuevaDeuda);
        Alert.alert("Éxito", "La deuda se ha guardado correctamente.");
      }

      await fetchDeudas();
      handleCloseForm();
      setShowForm(false);
    } catch (error) {
      Alert.alert("Error", "No se pudo guardar la deuda. Inténtelo de nuevo.");
    }
  };

  // Eliminar deuda
  const handleDeleteDeuda = async (id) => {
    try {
      await deleteDeudaFromFirestore(id);
      fetchDeudas();
      Alert.alert("Éxito", "La deuda se ha eliminado correctamente.");
    } catch (error) {
      Alert.alert("Error", "No se pudo eliminar la deuda.");
    }
  };

  // Editar deuda
  const handleEditDeuda = (deuda) => {
    setEditingDeudaId(deuda.id);
    setEntidad(deuda.entidad);
    setDeudaTotal(deuda.deudaTotal);
    setValorCuota(deuda.valorCuota);
    setPagosRealizados(deuda.pagosRealizados);
    setAtrasado(deuda.atrasado);
    setCuotas(deuda.cuotas);
    setFechaInicio(deuda.fechaInicio);
    setImagenEntidad(deuda.imagen || null);
    setShowForm(true);
  };

  // Cerrar formulario
  const handleCloseForm = () => {
    setShowForm(false);
    setEntidad("");
    setDeudaTotal("");
    setValorCuota("");
    setPagosRealizados(0);
    setAtrasado(ATRASADO_OPCIONES.NO);
    setCuotas(1);
    setFechaInicio("");
    setImagenEntidad(null);
    setEditingDeudaId(null);
  };

  // Cambiar entidad y mostrar sugerencias
  const handleEntidadChange = (texto) => {
    setEntidad(texto);
    if (texto.length > 0) {
      const sugerenciasFiltradas = entidadesFinancieras.filter((entidad) =>
        entidad.toLowerCase().includes(texto.toLowerCase())
      );
      setSugerencias(sugerenciasFiltradas);
    } else {
      setSugerencias([]);
    }
  };

  // Registrar pago
  const handleRegistrarPago = async (id, montoPago) => {
    try {
      const deuda = deudas.find((deuda) => deuda.id === id);
      const montoPagoNum = parseFloat(montoPago);

      if (isNaN(montoPagoNum) || montoPagoNum <= 0) {
        Alert.alert("Error", "Ingrese un monto de pago válido.");
        return;
      }

      let nuevosPagosRealizados = parseFloat(deuda.pagosRealizados) + montoPagoNum;
      let nuevaDeudaPendiente = parseFloat(deuda.deudaTotal) - nuevosPagosRealizados;
      let nuevasCuotasPagadas = deuda.cuotasPagadas;

      while (montoPagoNum >= parseFloat(deuda.valorCuota)) {
        nuevasCuotasPagadas += 1;
        montoPagoNum -= parseFloat(deuda.valorCuota);
      }

      if (nuevaDeudaPendiente <= 0) {
        await deleteDeudaFromFirestore(id);
        Alert.alert("Éxito", "La deuda ha sido completamente pagada y eliminada.");
      } else {
        await updateDeudaInFirestore(id, {
          pagosRealizados: nuevosPagosRealizados,
          cuotasPagadas: nuevasCuotasPagadas,
          deudaTotal: nuevaDeudaPendiente.toFixed(2),
        });
        Alert.alert("Éxito", "El pago se ha registrado correctamente.");
      }

      fetchDeudas();
    } catch (error) {
      Alert.alert("Error", "No se pudo registrar el pago.");
    }
  };

  // Mostrar detalles de la deuda
  const mostrarDetallesDeuda = (deuda) => {
    console.log("Datos de la deuda:", deuda); // Verifica los datos
    if (!deuda || !deuda.entidad || !deuda.deudaTotal || !deuda.fechaInicio || !deuda.cuotasPagadas || !deuda.cuotas || !deuda.valorCuota) {
      Alert.alert("Error", "Datos de la deuda incompletos.");
      return;
    }
  
    const deudaPendiente = calcularDeudaPendiente(deuda.deudaTotal, deuda.pagosRealizados);
  
    Alert.alert(
      "Detalles de la Deuda",
      `📌 ${deuda.entidad}\n\n💰 **Deuda Total:** $${deuda.deudaTotal}\n📆 **Fecha Inicio:** ${deuda.fechaInicio}\n💳 **Cuotas Pagadas:** ${deuda.cuotasPagadas} de ${deuda.cuotas}\n💲 **Valor Cuota:** $${deuda.valorCuota}\n🔹 **Deuda Pendiente:** $${deudaPendiente}`,
      [{ text: "Cerrar", style: "cancel" }]
    );
  };

  // Calcular deuda pendiente
  const calcularDeudaPendiente = (deudaTotal, pagosRealizados) => {
    const deudaPendiente = deudaTotal - pagosRealizados;
    return deudaPendiente > 0 ? deudaPendiente.toFixed(2) : 0;
  };

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <View style={styles.container}>
        {showForm ? (
          <DeudaForm
            entidad={entidad}
            setEntidad={setEntidad}
            deudaTotal={deudaTotal}
            setDeudaTotal={setDeudaTotal}
            valorCuota={valorCuota}
            setValorCuota={setValorCuota}
            fechaInicio={fechaInicio}
            setFechaInicio={setFechaInicio}
            atrasado={atrasado}
            setAtrasado={setAtrasado}
            cuotas={cuotas}
            setCuotas={setCuotas}
            imagenEntidad={imagenEntidad}
            sugerencias={sugerencias}
            setSugerencias={setSugerencias}
            handleEntidadChange={handleEntidadChange}
            handleSubmit={handleSubmit}
            handleCloseForm={handleCloseForm}
            editingDeudaId={editingDeudaId}
          />
        ) : (
          <DeudaList
            deudas={deudas}
            loading={loading}
            handleDeleteDeuda={handleDeleteDeuda}
            handleEditDeuda={handleEditDeuda}
            handleRegistrarPago={handleRegistrarPago}
            mostrarDetallesDeuda={mostrarDetallesDeuda}
          />
        )}

        {!showForm && (
          <TouchableOpacity
            style={styles.floatingButton}
            onPress={() => setShowForm(true)}
          >
            <Text style={styles.floatingButtonText}>Agregar Deuda</Text>
          </TouchableOpacity>
        )}
      </View>
    </GestureHandlerRootView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 15, backgroundColor: "#F5F5F5" },
  floatingButton: { position: "absolute", bottom: 20, right: 20, backgroundColor: "#3498DB", padding: 15, borderRadius: 30, elevation: 5 },
  floatingButtonText: { color: "#FFFFFF", fontSize: 20, fontWeight: "bold" },
});

-------------------------------------------------------------------------------------------

import React from "react";
import { View, Text, StyleSheet, TextInput, TouchableOpacity, FlatList } from "react-native";

const ATRASADO_OPCIONES = { NO: "No", SI: "Sí" };

const DeudaForm = ({
  entidad,
  setEntidad,
  deudaTotal,
  setDeudaTotal,
  valorCuota,
  setValorCuota,
  fechaInicio,
  setFechaInicio,
  atrasado,
  setAtrasado,
  cuotas,
  setCuotas,
  cuotasPagadas,
  setCuotasPagadas,
  imagenEntidad,
  setSugerencias,
  sugerencias,
  handleEntidadChange,
  handleSubmit,
  handleCloseForm,
  editingDeudaId,
}) => {
  return (
    <View style={styles.formContainer}>
      <Text style={styles.label}>Entidad Financiera</Text>
      <TextInput
        style={styles.input}
        value={entidad}
        onChangeText={handleEntidadChange}
        placeholder="Ej: Banco XYZ"
        placeholderTextColor="#888"
      />
      {sugerencias.length > 0 && (
        <FlatList
          data={sugerencias}
          keyExtractor={(item, index) => index.toString()}
          renderItem={({ item }) => (
            <TouchableOpacity onPress={() => {
              setEntidad(item);
              setSugerencias([]);
            }}>
              <Text style={styles.sugerenciaItem}>{item}</Text>
            </TouchableOpacity>
          )}
          style={styles.sugerenciasContainer}
        />
      )}

      <Text style={styles.label}>Deuda Total</Text>
      <TextInput
        style={styles.input}
        value={deudaTotal}
        onChangeText={setDeudaTotal}
        keyboardType="numeric"
        placeholder="Ej: 10000.00"
        placeholderTextColor="#888"
      />

      <Text style={styles.label}>Valor de la Cuota</Text>
      <TextInput
        style={styles.input}
        value={valorCuota}
        onChangeText={setValorCuota}
        keyboardType="numeric"
        placeholder="Ej: 500.00"
        placeholderTextColor="#888"
      />

      <Text style={styles.label}>Fecha Deuda</Text>
      <TextInput
        style={styles.input}
        value={fechaInicio}
        onChangeText={setFechaInicio}
        placeholder="DD-MM-AAAA"
        placeholderTextColor="#888"
      />

      <Text style={styles.label}>¿Estás atrasado en los pagos?</Text>
      <View style={styles.toggleContainer}>
        <TouchableOpacity
          onPress={() => setAtrasado(ATRASADO_OPCIONES.NO)}
          style={[
            styles.toggleButton,
            atrasado === ATRASADO_OPCIONES.NO ? styles.selectedYes : styles.unselected,
          ]}
        >
          <Text style={styles.toggleText}>No</Text>
        </TouchableOpacity>
        <TouchableOpacity
          onPress={() => setAtrasado(ATRASADO_OPCIONES.SI)}
          style={[
            styles.toggleButton,
            atrasado === ATRASADO_OPCIONES.SI ? styles.selectedNo : styles.unselected,
          ]}
        >
          <Text style={styles.toggleText}>Sí</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.cuotasContainer}>
        <Text style={styles.cuotasText}>Cuota</Text>
        <TextInput
          style={[styles.input, styles.cuotasInput]}
          value={cuotasPagadas?.toString() || "0"}
          onChangeText={(text) => setCuotasPagadas(Number(text))}
          keyboardType="numeric"
          placeholder="0"
          placeholderTextColor="#888"
        />
        <Text style={styles.cuotasText}>de</Text>
        <TextInput
          style={[styles.input, styles.cuotasInput]}
          value={cuotas?.toString() || "0"}
          onChangeText={(text) => setCuotas(Number(text))}
          keyboardType="numeric"
          placeholder="0"
          placeholderTextColor="#888"
        />
      </View>

      <View style={styles.buttonContainer}>
        <TouchableOpacity style={styles.cancelButton} onPress={handleCloseForm}>
          <Text style={styles.buttonText}>Cancelar</Text>
        </TouchableOpacity>
        <TouchableOpacity style={styles.saveButton} onPress={handleSubmit}>
          <Text style={styles.buttonText}>{editingDeudaId ? "Actualizar" : "Guardar"}</Text>
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  formContainer: { 
    backgroundColor: "#FFFFFF", 
    padding: 20, 
    borderRadius: 15, 
    shadowColor: "#000", 
    shadowOffset: { width: 0, height: 4 }, 
    shadowOpacity: 0.2, 
    shadowRadius: 10, 
    elevation: 5, 
    marginBottom: 10, 
    marginTop: 10 
  },
  label: { 
    color: "#34495E", 
    marginBottom: 5, 
    fontSize: 16, 
    fontWeight: "500" 
  },
  input: { 
    backgroundColor: "#ECF0F1", 
    color: "#2C3E50", 
    padding: 10, 
    borderRadius: 10, 
    marginBottom: 15, 
    fontSize: 14, 
    borderWidth: 1, 
    borderColor: "#BDC3C7", 
    textAlign: "center", 
    height: 40, 
  },
  toggleContainer: { 
    flexDirection: "row", 
    justifyContent: "space-between", 
    marginBottom: 15 
  },
  toggleButton: { 
    flex: 1, 
    padding: 12, 
    alignItems: "center", 
    marginHorizontal: 5, 
    borderRadius: 8, 
    borderWidth: 1, 
    borderColor: "#BDC3C7", 
    backgroundColor: "#FFFFFF" 
  },
  toggleText: { 
    color: "#2C3E50", 
    fontSize: 16, 
    fontWeight: "600" 
  },
  selectedYes: { 
    backgroundColor: "#2ECC71", 
    borderColor: "#27AE60" 
  },
  selectedNo: { 
    backgroundColor: "#E74C3C", 
    borderColor: "#C0392B" 
  },
  unselected: { 
    backgroundColor: "#FFFFFF" 
  },
  cuotasContainer: { 
    flexDirection: "row", 
    alignItems: "center", 
    justifyContent: "center", 
    marginBottom: 15 
  },
  cuotasText: { 
    fontSize: 16, 
    color: "#2C3E50", 
    fontWeight: "500", 
    textAlign: "center", 
    marginHorizontal: 5 
  },
  cuotasInput: { 
    flex: 1, 
    maxWidth: 60, 
    textAlign: "center", 
    marginHorizontal: 5,
    padding: 5, 
    fontSize: 14, 
    height: 40, 
  },
  sugerenciasContainer: { 
    backgroundColor: "#fff", 
    borderRadius: 5, 
    elevation: 3, 
    marginTop: 5, 
    maxHeight: 150, 
    borderColor: "#ddd", 
    borderWidth: 1 
  },
  sugerenciaItem: { 
    padding: 10, 
    borderBottomWidth: 1, 
    borderBottomColor: "#ddd", 
    color: "#333" 
  },
  buttonContainer: { 
    flexDirection: "row", 
    justifyContent: "space-between", 
    marginTop: 20 
  },
  cancelButton: { 
    backgroundColor: "#E74C3C", 
    padding: 15, 
    borderRadius: 10, 
    flex: 1, 
    marginRight: 10, 
    alignItems: "center", 
    shadowColor: "#000", 
    shadowOffset: { width: 0, height: 4 }, 
    shadowOpacity: 0.5, 
    shadowRadius: 10, 
    elevation: 5 
  },
  saveButton: { 
    backgroundColor: "#2ECC71", 
    padding: 15, 
    borderRadius: 10, 
    flex: 1, 
    marginLeft: 10, 
    alignItems: "center", 
    shadowColor: "#000", 
    shadowOffset: { width: 0, height: 4 }, 
    shadowOpacity: 0.5, 
    shadowRadius: 10, 
    elevation: 5 
  },
  buttonText: { 
    color: "#FFFFFF", 
    fontSize: 16, 
    fontWeight: "bold" 
  },
});

export default DeudaForm;