import React, { useState, useEffect, useCallback } from "react";
import {
  View,
  Text,
  StyleSheet,
  TextInput,
  Alert,
  FlatList,
  TouchableOpacity,
  ScrollView,
  ActivityIndicator,
  Image,
} from "react-native";
import { Swipeable, GestureHandlerRootView } from 'react-native-gesture-handler';
import { addDeudaToFirestore, getDeudasFromFirestore, deleteDeudaFromFirestore } from "../credenciales";

const ATRASADO_OPCIONES = { NO: "No", SI: "Sí" };

const entidadImagenes = {
  "Bancolombia": require('../assets/Bancolombia.webp'),
};

export default function DeudasScreen() {
  const [showForm, setShowForm] = useState(false);
  const [entidad, setEntidad] = useState("");
  const [monto, setMonto] = useState("");
  const [atrasado, setAtrasado] = useState(ATRASADO_OPCIONES.NO);
  const [cuotas, setCuotas] = useState(1);
  const [deudaPendiente, setDeudaPendiente] = useState("");
  const [deudas, setDeudas] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => { fetchDeudas(); }, []);

  const fetchDeudas = async () => {
    setLoading(true);
    try {
      const data = await getDeudasFromFirestore();
      setDeudas(data);
    } catch {
      Alert.alert("Error", "No se pudieron cargar las deudas.");
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async () => {
    if (!entidad.trim() || !monto.trim()) {
      Alert.alert("Error", "Todos los campos son obligatorios.");
      return;
    }

    const nuevaDeuda = {
      entidad,
      monto: parseFloat(monto).toFixed(2),
      atrasado,
      cuotas,
      deudaPendiente: atrasado === ATRASADO_OPCIONES.SI ? parseFloat(deudaPendiente).toFixed(2) : null,
      fecha: new Date().toISOString(),
    };

    try {
      await addDeudaToFirestore(nuevaDeuda);
      fetchDeudas();
      setShowForm(false);
    } catch {
      Alert.alert("Error", "No se pudo guardar la deuda.");
    }
  };

  const handleDeleteDeuda = async (id) => {
    Alert.alert("Eliminar Deuda", "¿Seguro que deseas eliminar esta deuda?", [
      { text: "Cancelar", style: "cancel" },
      { text: "Eliminar", onPress: async () => {
          await deleteDeudaFromFirestore(id);
          fetchDeudas();
        } },
    ]);
  };

  const renderItem = useCallback(({ item }) => (
    <Swipeable renderRightActions={() => (
      <TouchableOpacity style={styles.deleteButton} onPress={() => handleDeleteDeuda(item.id)}>
        <Text style={styles.deleteButtonText}>Eliminar</Text>
      </TouchableOpacity>
    )}>
      <View style={[styles.item, { borderLeftColor: item.atrasado === ATRASADO_OPCIONES.SI ? "#E74C3C" : "#3498DB" }]}>      
        {entidadImagenes[item.entidad] && (
          <Image source={entidadImagenes[item.entidad]} style={styles.entityImage} />
        )}
        <Text style={styles.itemText}>${parseFloat(item.monto).toLocaleString("es-ES", { minimumFractionDigits: 2 })}</Text>
        {item.atrasado === ATRASADO_OPCIONES.SI && (
          <Text style={styles.itemText}>Pendiente: ${parseFloat(item.deudaPendiente).toLocaleString("es-ES", { minimumFractionDigits: 2 })}</Text>
        )}
        <Text style={styles.itemText}>Cuotas: {item.cuotas}</Text>
      </View>
    </Swipeable>
  ), []);

  return (
    <GestureHandlerRootView style={{ flex: 1 }}>
      <View style={styles.container}>
        <Text style={styles.title}>Deudas</Text>
        {loading ? (
          <ActivityIndicator size="large" color="#4CAF50" />
        ) : (
          <FlatList data={deudas} keyExtractor={(item) => item.id} renderItem={renderItem} />
        )}
        {!showForm && (
          <TouchableOpacity style={styles.floatingButton} onPress={() => setShowForm(true)}>
            <Text style={styles.floatingButtonText}>+</Text>
          </TouchableOpacity>
        )}
      </View>
    </GestureHandlerRootView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 15, backgroundColor: "#F5F5F5" },
  title: { fontSize: 22, fontWeight: "bold", textAlign: "center", marginBottom: 10, color: "#2C3E50" },
  item: {
    backgroundColor: "#FFFFFF",
    padding: 12,
    borderRadius: 10,
    marginBottom: 10,
    flexDirection: "row",
    alignItems: "center",
    borderLeftWidth: 8,
    shadowColor: "#000",
    shadowOpacity: 0.1,
    shadowRadius: 5,
    elevation: 3,
  },
  entityImage: { width: 40, height: 40, marginRight: 10, borderRadius: 5 },
  itemText: { fontSize: 14, color: "#2C3E50", flex: 1 },
  deleteButton: { backgroundColor: "#E74C3C", padding: 10, borderRadius: 5, alignItems: "center", justifyContent: "center" },
  deleteButtonText: { color: "#FFFFFF", fontSize: 14, fontWeight: "bold" },
  floatingButton: { position: "absolute", bottom: 20, right: 20, backgroundColor: "#3498DB", padding: 15, borderRadius: 30, elevation: 5 },
  floatingButtonText: { color: "#FFFFFF", fontSize: 20, fontWeight: "bold" },
});
